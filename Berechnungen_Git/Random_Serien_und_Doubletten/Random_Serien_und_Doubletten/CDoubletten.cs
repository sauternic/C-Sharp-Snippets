using System;
using System.Collections.Generic;


namespace RandomSerienDoubletten
{
    
    //Für Random siehe Random und dort Program.cs
    class CDoubletten
    {
        //Statisch Aufrufare-Methode mit Rückgabe!! :)
        //Siehe unten zusammengeklappt die zugrundeliegende Main Methode! :/
        public static byte[] NSAlgorithmus(long groesse)
        {
            long i = 20;
            int vergleich1 = 0;
            byte[] by = new byte[groesse];

            //Die ersten x Iterationen Verwerfen! ;) (siehe Unten)
            Random rnd1 = new Random();
            //Nur Hilszufallgenerator für Startwert und Iterationanzahl wechseln beim Aendern.
            Random rnd2 = new Random();
            //Instanz Zufallsgenerator
            CHP CHP1 = new CHP();

            // Erste Werte Verwerfen (Unregelmässig)
            vergleich1 = rnd1.Next(4, 21);
            for (int x = 0; x < vergleich1; ++x)
            {
                CHP1.startwert = rnd2.NextDouble();
            }

            for (long x = 0; x < groesse; ++x)
            {

                //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2
                //Startwert alle x (Ungregelmässig) Wiederholungen neu setzen! ;)
                if (x > i)
                {
                    i = rnd2.Next(20, 300) + x;
                    CHP1.startwert = rnd1.NextDouble();
                    //long xxx = i - x;
                }
                //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2

                //Hier wird die Haubtarbeit getan!!!!!!!! :'@
                by[x] = Convert.ToByte(CHP1.hpMethode() * 255);

            }//Ende for
            return by;
        }//Ende Methode NSAlgorithmus
        
 //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  
 //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      

        //HP-Methode!! :)
        static void Main(string[] args)
        {
            int Stellen = 1;
            long i = 20;
            bool flag = true;
            double vergleich = 0.0;
            int vergleich3 = 0;
            double vergleich_behalten = 0.0;
            double Wert1;
            double Wert2;
            long durchlauf = 1000000000000L;//1000000000000L;1 Billion Durgänge! :)
            long durchlauf_Progress = 0;
            double dblEingabe = 0.0;
            int zaehlenAusstieg = 0;
           
            List<string> strList = new List<string>();
            
            //Die ersten x Iterationen Verwerfen! ;) (siehe Unten)
            Random rnd1 = new Random();
            //Nur Hilszufallgenerator für Startwert und Iterationanzahl wechseln beim Aendern.
            Random rnd2 = new Random();
            //Instanz Zufallsgenerator
            CHP CHP1 = new CHP();
            
            // Erste Werte Verwerfen (Unregelmässig)
            vergleich3 = rnd1.Next(4,21);
            for (int x = 0; x < vergleich3; ++x)
            {
                CHP1.startwert = rnd2.NextDouble();
            }

            //Programm immer Wiederholen! :)
            while (true)
            {
                #region Eingaben, Validieren
                //Eingabe Startwert, Werte Validieren! :)
                while (true)
                {

                    Console.WriteLine("HP-Methode Doubletten?\n");
                    Console.WriteLine("Also die Frage ist ob sich die HP-Methode\nirgendwann wiederholt?\n");
                    Console.WriteLine("Zum Beenden <b> Taste\n");
                    Console.Write("Wert zu Treffen, zwischen 0 und 1 : ");

                    try
                    {
                        string strE = Console.ReadLine();
                        if (strE == "b")
                            Environment.Exit(10);
                        //Das neuer Wert auch unten gesetzt wird beim 2. Mal Eingeben(wenn Programm nicht ganz Abgebrochen wird)
                        flag = true;
                        dblEingabe = Convert.ToDouble(strE);
                    }
                    catch (Exception)
                    {
                        Console.WriteLine("Ungültiger Wert! :(\n\n");
                        continue;
                    }
                    if (dblEingabe < 0 || dblEingabe > 1)
                    {
                        Console.WriteLine("Wert Ausserhalb Bereich! :(\n\n");
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }

                //Eingabe Stellen hinter Komma die übereinstimmen, Werte Validieren! :)
                while (true)
                {
                    Console.Write("Stellen zwischen 1 und 10 : ");
                    try
                    {
                        Stellen = Convert.ToInt32(Console.ReadLine());
                    }
                    catch (Exception)
                    {
                        Console.WriteLine("Ungültiger Wert! :(\n\n");
                        continue;
                    }
                    //Abstand zum Beginn der Ausgaben
                    finally
                    {
                        Console.Write("\n");
                    }

                    if (Stellen < 1 || Stellen > 10)
                    {
                        Console.WriteLine("Wert Ausserhalb Bereich! :(\n\n");
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                #endregion

                durchlauf_Progress = durchlauf / 1000;
                for (long x = 0; x <= durchlauf; ++x)//x = 0 weil ja erst nach 2. Durchgang die HP-Methode aufgerufen wird.(siehe flag)
                {
                    // Progresspar
                    if (x % durchlauf_Progress == 0)
                    {
                        Console.WriteLine("Trefferwert->HP: " + dblEingabe + "   Stellen: " + Stellen + "   Durchläufe: " + x.ToString("#,#"));
                    }


                    //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2
                    //Startwert alle x (Ungregelmässig) Wiederholungen neu setzen! ;)
                    if (x > i)
                    { 
                        i = rnd2.Next(20, 300) + x;
                        CHP1.startwert = rnd1.NextDouble();
                        long xxx = i - x;
                    }
                    //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2

                    

                    // Schauen ob sich der Logarithmus wiederholt?? :/
                    if (flag == true)
                    {  
                        //Wird nur beim ersten Durchgang durchgeführt nachher nur wenn flag wieder auf True gesetzt wird :/
                        vergleich = dblEingabe;//Startwert Zuweisen
                        vergleich_behalten = vergleich;
                    }

                    if (flag == false)
                    {                     
                        
                        //Hier wird die Haubtarbeit getan!!!!!!!! :'@
                        vergleich = CHP1.hpMethode();
                      
                        //Wert1 = Math.Round(vergleich_behalten, Stellen);
                        Wert1 = Math.Round(vergleich_behalten, Stellen);
                        Wert2 = Math.Round(vergleich, Stellen);


                        if (Wert1 == Wert2)
                        {
                            #region erste oder mehrere Ergebnisse Ausgeben.
                            //***************************************************************************************** 
                            //Nur erste übereinstimmung Ausgeben und Abbrechen! :/
                            Console.WriteLine(x.ToString("#,#") + "  " + vergleich.ToString());
                            break;
                            //***************************************************************************************** 

                            //oder:

                            //***************************************************************************************** 
                            //strList.Add(x.ToString("#,#") + "  " + vergleich.ToString());
                            ////strList.Sort();

                            //++zaehlenAusstieg;
                            //if (zaehlenAusstieg > 100)
                            //{
                            //    foreach (string str in strList)
                            //    {

                            //        Console.WriteLine(str);
                            //        ++zaehlenAusstieg;
                            //    }

                            //    break;
                            //}
                            //***************************************************************************************** 
                            #endregion
                        }
                    }
                    flag = false;
                }//Ende for
                Console.Read();
            }//Ende while (Programm immer Wiederholen)
        }//Ende Methode Main
    }//Ende class CDoubletten
}

//HP-Periodenlaenge 825'081
//Kommt aber erst bei 5 Stellen zum Vorschein
//Fällt erst nach einer gewissen wiederholung rein, und ist auch vom Startwert abhängig!! :/


//Startwert->HP: 1   Stellen: 5   Durchläufe:
#region
//550'630  0.999999221947292
//980'548  0.999998056380718
//1'006'576  0.999997541445737
//1'667'131  0.999998501545633
//1'725'617  0.999995829270119
//2'133'510  0.999999108442353
//2'551'755  0.999998501545633
//2'610'241  0.999995829270119
//3'018'134  0.999999108442353
//3'436'379  0.999998501545633
//3'494'865  0.999995829270119
//3'902'758  0.999999108442353
//4'321'003  0.999998501545633
//4'379'489  0.999995829270119
//4'787'382  0.999999108442353
//5'205'627  0.999998501545633
//5'264'113  0.999995829270119
//5'672'006  0.999999108442353
//6'090'251  0.999998501545633
//6'148'737  0.999995829270119
//6'556'630  0.999999108442353
//6'974'875  0.999998501545633
//7'033'361  0.999995829270119
//7'441'254  0.999999108442353
//7'859'499  0.999998501545633
//7'917'985  0.999995829270119
//8'325'878  0.999999108442353
//8'744'123  0.999998501545633
//8'802'609  0.999995829270119
//9'210'502  0.999999108442353
//9'628'747  0.999998501545633
//9'687'233  0.999995829270119
//10'095'126  0.999999108442353
//10'513'371  0.999998501545633
//10'571'857  0.999995829270119
//10'979'750  0.999999108442353
//11'397'995  0.999998501545633
//11'456'481  0.999995829270119
//11'864'374  0.999999108442353
//12'282'619  0.999998501545633
//12'341'105  0.999995829270119
//12'748'998  0.999999108442353
//13'167'243  0.999998501545633
//13'225'729  0.999995829270119
//13'633'622  0.999999108442353
//14'051'867  0.999998501545633
//14'110'353  0.999995829270119
//14'518'246  0.999999108442353
//14'936'491  0.999998501545633
//14'994'977  0.999995829270119
//15'402'870  0.999999108442353
//15'821'115  0.999998501545633
//15'879'601  0.999995829270119
//16'287'494  0.999999108442353
//16'705'739  0.999998501545633
//16'764'225  0.999995829270119
//17'172'118  0.999999108442353
//17'590'363  0.999998501545633
//17'648'849  0.999995829270119
//18'056'742  0.999999108442353
//18'474'987  0.999998501545633
//18'533'473  0.999995829270119
//18'941'366  0.999999108442353
//19'359'611  0.999998501545633
//19'418'097  0.999995829270119
//19'825'990  0.999999108442353
//20'244'235  0.999998501545633
//20'302'721  0.999995829270119
//20'710'614  0.999999108442353
//21'128'859  0.999998501545633
//21'187'345  0.999995829270119
//21'595'238  0.999999108442353
//22'013'483  0.999998501545633
//22'071'969  0.999995829270119
//22'479'862  0.999999108442353
//22'898'107  0.999998501545633
//22'956'593  0.999995829270119
//23'364'486  0.999999108442353
//23'782'731  0.999998501545633
//23'841'217  0.999995829270119
//24'249'110  0.999999108442353
//24'667'355  0.999998501545633
//24'725'841  0.999995829270119
//25'133'734  0.999999108442353
//25'551'979  0.999998501545633
//25'610'465  0.999995829270119
//26'018'358  0.999999108442353
//26'436'603  0.999998501545633
//26'495'089  0.999995829270119
//26'902'982  0.999999108442353
//27'321'227  0.999998501545633
//27'379'713  0.999995829270119
//27'787'606  0.999999108442353
//28'205'851  0.999998501545633
//28'264'337  0.999995829270119
//28'672'230  0.999999108442353
//29'090'475  0.999998501545633
//29'148'961  0.999995829270119
//29'556'854  0.999999108442353
//29'975'099  0.999998501545633
//30'033'585  0.999995829270119
#endregion

//Startwert->HP: 1   Stellen: 5   Durchläuf alle 1000 um 0.000001 startwert Erhöhen! :)
#region
//235'850  0.999998302537279
//576'672  0.999999427815055
//838'626  0.99999849309097
//1'855'360  0.999995077538188
//1'864'355  0.999995422334905
//1'982'057  0.999998487648554
//2'285'193  0.999995120728272
//2'420'351  0.999999660180038
//2'488'295  0.999999676707375
//2'657'801  0.999999557287083
//3'164'642  0.999998891831638
//3'278'663  0.999995713904354
//3'389'737  0.99999563844176
//3'845'063  0.999998803876224
//4'046'637  0.999996719838236
//4'070'488  0.999996583734173
//4'148'475  0.999997743416316
//4'536'284  0.999999076939275
//4'615'160  0.999998909501301
//4'708'119  0.999999816383934
//4'741'894  0.999995881804352
//4'753'643  0.999998035917088
//4'919'031  0.999999409952579
//5'412'753  0.999996518818079
//5'552'698  0.999997044142219
//5'687'886  0.999999674491846
//6'112'080  0.999995756530552
//6'680'293  0.999999274978109
//6'865'185  0.99999527561522
//7'052'753  0.999996231439582
//7'089'943  0.999996336686309
//7'117'871  0.999998300063453
//7'497'474  0.999996336686309
//7'520'043  0.999995591089828
//7'567'801  0.999996636543074
//7'771'991  0.999995282792952
//8'039'626  0.999996385347913
//8'222'301  0.999997588163751
//8'826'963  0.999999930842023
//9'005'463  0.999995286729245
//9'107'905  0.999995275833498
//9'361'714  0.999996699130861
//9'385'676  0.99999934078005
//9'476'846  0.999996026401277
//9'619'164  0.999995624237272
//9'693'094  0.999997805571184
//10'048'695  0.99999782514351
//10'333'731  0.999998618099198
//10'422'516  0.999996703249053
//11'009'526  0.99999591922824
//11'047'489  0.999996727106918
//11'526'299  0.999998239884007
//11'529'296  0.999996235837898
//11'731'384  0.999996811260644
//12'483'382  0.999997414321115
//12'493'059  0.999998995972419
//12'596'284  0.999999205065251
//12'623'451  0.999996950602508
//12'653'784  0.999996575097612
//12'709'562  0.999995201680576
//12'890'753  0.999996724087396
//13'117'613  0.999999884465069
//13'486'736  0.99999613664113
//13'543'432  0.999996336686309
//13'833'390  0.99999981320434
//14'103'085  0.999998395636794
//14'133'430  0.999997149356204
//14'737'322  0.99999696399027
//14'862'696  0.999997066821379
//14'879'193  0.99999558797208
//14'955'901  0.9999992715384
//14'985'152  0.999997277918737
//15'134'469  0.999996402009856
//15'278'939  0.999998825695002
//15'374'963  0.999995754238626
//15'403'376  0.999998748429789
//15'672'983  0.999998205705197
//15'756'288  0.99999530344212
//15'982'620  0.999996914102667
//16'190'585  0.999999833249603
//16'258'651  0.999995038575435
//16'314'893  0.999997437258571
//16'467'787  0.999997163358785
//16'773'846  0.999995851943822
//16'774'890  0.999995077654603
//17'031'554  0.999996826787537
//17'782'256  0.999999660278263
//17'994'340  0.999997418446583
//18'096'870  0.99999779627251
//18'135'041  0.999995742284227
//18'198'730  0.999995461666913
//18'343'162  0.99999895350993
//18'349'377  0.99999761901563
//18'493'813  0.999998823310307
//18'769'646  0.99999622865289
//19'216'112  0.999998879902705
//19'295'701  0.999996231439582
//19'311'119  0.999996668746462
//19'674'613  0.999995256868715
//19'752'350  0.999996606573404
//20'067'966  0.999995411875716
#endregion

//Startwert->HP: 1   Stellen: 5   Durchläufe: Durchläuf alle 1000 um0.0000000001 startwert Erhöhen! :)
#region
//773'035  0.999995822232449
//805'894  0.999996731101419
//964'079  0.999998577979568
//1'080'787  0.999995655467501
//1'288'997  0.999999779211066
//1'422'082  0.999995774091076
//1'643'080  0.999997161005012
//1'747'688  0.999996076738171
//1'907'790  0.999998070125002
//1'953'029  0.999997444392648
//2'128'945  0.999997677357896
//2'242'825  0.999998789004167
//2'346'821  0.999999156862032
//2'410'436  0.999995713555109
//2'500'508  0.999995811966073
//2'600'749  0.999996261889464
//2'724'826  0.999995044590833
//2'985'259  0.999999522695362
//3'433'421  0.999997876846464
//4'308'245  0.999997196237018
//4'375'774  0.99999691076664
//4'507'443  0.99999791299706
//4'594'656  0.999997876846464
//4'649'338  0.999998132807377
//5'031'112  0.999995188625689
//5'034'687  0.999998748429789
//5'134'248  0.99999558797208
//5'181'513  0.999997309205355
//5'224'803  0.999997555372829
//5'237'363  0.999996950602508
//5'349'228  0.999995018970367
//5'648'665  0.999997625200194
//5'734'181  0.999999486622983
//6'039'126  0.999995021003997
//6'261'454  0.999995207399479
//6'506'128  0.999996733022272
//6'644'349  0.999999195060809
//6'703'927  0.999999971791112
//6'816'083  0.999995551923348
//7'217'567  0.999998811525074
//7'405'200  0.999997311650077
//7'474'457  0.999996783677489
//7'523'080  0.999999153380486
//7'849'943  0.999995282792952
//8'450'846  0.999998991661414
//8'492'957  0.99999570368891
//8'635'161  0.999997436301783
//8'675'818  0.999998549554221
//8'698'016  0.999996664642822
//9'254'735  0.999999445346475
//9'504'044  0.999995889507773
//9'634'452  0.999996483817085
//9'734'099  0.999998840226908
//9'939'317  0.999999617670255
//10'063'842  0.999995453574229
//10'976'527  0.999999548708729
//11'199'353  0.999999344872776
//11'855'711  0.999998678133124
//12'200'624  0.999999030362233
//12'364'847  0.999996379876393
//12'860'089  0.999998912764568
//12'877'477  0.999995149446477
//13'009'183  0.999996201713657
//13'050'588  0.999996857142833
//13'061'796  0.999997979772161
//13'140'872  0.999997334409272
//13'149'483  0.999997286482539
//13'150'041  0.999998189006874
//13'367'271  0.999996426922735
//13'424'966  0.999998981351382
//13'444'297  0.9999957470136
//13'484'262  0.999999688639946
//14'242'568  0.999998104589395
//14'264'354  0.999996104306774
//14'266'578  0.999999505424057
//14'387'233  0.999996946004103
//14'397'364  0.999997149356204
//14'572'893  0.999998339444574
//15'021'240  0.99999811235466
//15'664'574  0.999997677357896
//16'263'672  0.999995316245986
//16'310'838  0.999995977064827
//16'771'064  0.99999876714719
//17'181'336  0.999999676707375
//17'191'369  0.999997636790795
//17'346'896  0.999999753767042
//17'415'817  0.999999503299478
//17'416'783  0.999999795174517
//17'498'007  0.999998514607796
//17'608'546  0.999997679804437
//17'703'167  0.999997443635948
//17'734'911  0.999997983686626
//17'861'782  0.999995961044988
//17'984'692  0.999998545987182
//18'437'149  0.999997812206857
//18'608'504  0.999997951919795
//18'710'014  0.999998779632733
//18'832'793  0.99999797485907
//19'082'744  0.999998013423465
//19'561'605  0.999996848568117
//19'995'826  0.999995545615093
#endregion